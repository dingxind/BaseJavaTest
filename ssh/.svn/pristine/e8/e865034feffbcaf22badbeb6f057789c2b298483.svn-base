package cn.itcast.dao;

import java.util.List;

import org.hibernate.criterion.DetachedCriteria;
import org.hibernate.criterion.Restrictions;
import org.springframework.orm.hibernate5.support.HibernateDaoSupport;

import cn.itcast.entity.Customer;
import cn.itcast.entity.Dict;

public class CustomerDaoImpl extends BaseDaoImpl<Customer> implements CustomerDao {

	
	@SuppressWarnings("all")
	@Override
	public int findCount() {
		List<Object> list = (List<Object>) this.getHibernateTemplate().find("select count(*) from Customer");
		
		if(list != null && list.size()!=0) {
			Object obj = list.get(0);
			
			Long lobj = (Long) obj;
			int count = lobj.intValue();
			return count;
		}
		return 0;
	}
//
	@SuppressWarnings("all")
	@Override
	public List<Customer> findAllPage(int begin, int pageSize) {
		DetachedCriteria criteria = DetachedCriteria.forClass(Customer.class);
		List<Customer> list =  (List<Customer>) this.getHibernateTemplate().findByCriteria(criteria, begin, pageSize);
		return list;
	}
//
	@SuppressWarnings("all")
	@Override
	public List<Customer> findConditain(Customer customer) {
	
		DetachedCriteria criteria = DetachedCriteria.forClass(Customer.class);
		criteria.add(Restrictions.like("custName", "%"+customer.getCustName()+"%"));
	
		List<Customer> list = 
				(List<Customer>) this.getHibernateTemplate().findByCriteria(criteria);
		return list;
	}
//多条件查询（推荐离线）
	@SuppressWarnings("unchecked")
	public List<Customer> findMoreCondition(Customer customer) {
		DetachedCriteria criteria = DetachedCriteria.forClass(Customer.class);
	
		if(customer.getCustName()!=null && !"".equals(customer.getCustName())) {
		
			criteria.add(Restrictions.eq("custName", customer.getCustName()));
		}
		if(customer.getDictCusLevel().getDid()!=null ) {
			criteria.add(Restrictions.eq("dictCusLevel.did", customer.getDictCusLevel().getDid()));
		}
		if(customer.getCustSource()!=null && !"".equals(customer.getCustSource())) {
			criteria.add(Restrictions.eq("custSource", customer.getCustSource()));
		}
		
		return (List<Customer>) this.getHibernateTemplate().findByCriteria(criteria);
	}
	@SuppressWarnings("unchecked")
	@Override
	public List<Dict> findAllDictLevel() {
		
		return (List<Dict>) this.getHibernateTemplate().find("from Dict");
	}



	

}
