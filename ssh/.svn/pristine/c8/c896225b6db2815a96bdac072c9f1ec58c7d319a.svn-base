package cn.itcast.dao;

import java.util.List;

import org.hibernate.criterion.DetachedCriteria;
import org.hibernate.criterion.Restrictions;
import org.springframework.orm.hibernate5.support.HibernateDaoSupport;

import cn.itcast.entity.Customer;

public class CustomerDaoImpl extends HibernateDaoSupport implements CustomerDao {

	//完成保存
	public void save(Customer customer) {
		this.getHibernateTemplate().save(customer);
		
	}

	//完成查询
	@SuppressWarnings("all")
	public List<Customer> findAll() {

		return (List<Customer>) this.getHibernateTemplate().find("from Customer");
	}
//
	@Override
	public Customer findOne(int cid) {
	
		return this.getHibernateTemplate().get(Customer.class, cid);
	}
//
	@Override
	public void delete(Customer c) {
		this.getHibernateTemplate().delete(c);
	}

	@Override
	public void update(Customer customer) {
		this.getHibernateTemplate().update(customer);
		
	}
//
	@SuppressWarnings("all")
	@Override
	public int findCount() {
		List<Object> list = (List<Object>) this.getHibernateTemplate().find("select count(*) from Customer");
		
		if(list != null && list.size()!=0) {
			Object obj = list.get(0);
			
			Long lobj = (Long) obj;
			int count = lobj.intValue();
			return count;
		}
		return 0;
	}
//
	@SuppressWarnings("all")
	@Override
	public List<Customer> findAllPage(int begin, int pageSize) {
		DetachedCriteria criteria = DetachedCriteria.forClass(Customer.class);
		List<Customer> list =  (List<Customer>) this.getHibernateTemplate().findByCriteria(criteria, begin, pageSize);
		return list;
	}
//
	@SuppressWarnings("all")
	@Override
	public List<Customer> findConditain(Customer customer) {
	
		DetachedCriteria criteria = DetachedCriteria.forClass(Customer.class);
		criteria.add(Restrictions.like("custName", "%"+customer.getCustName()+"%"));
	
		List<Customer> list = 
				(List<Customer>) this.getHibernateTemplate().findByCriteria(criteria);
		return list;
	}

	

}
